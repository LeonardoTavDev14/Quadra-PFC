// TypeOrm (prisma)
generator client {
  provider = "prisma-client-js"
}

// Provider (banco de dados = mongodb) Url (string de conexão com o banco de dados)
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Tipos de permissões no sistema 
enum userPermissions {
  USER 
  ADMIN
  OWNER
}

// Tipos de gêneros
enum userGender {
  MALE
  FEMALE
  NOTINFORM
}

// Tipos de status de order
enum orderStatus {
  PENDING
  APPROVED
  DENIED
}

// Tipos de status do suporte
enum supportStatus {
  PEDDING
  RESOLVED
}

// Tabela usuário (e seus atributos)
model user {
  // identificador do usuário
  id       String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos obrigatórios
  name              String
  email             String @unique
  password          String
  age               Int
  role              userPermissions @default(USER)
  address           String
  cep               String
  cpf               String
  gender            userGender
  profileImage      String
  
  // dados opcionais
  latitude          Float?
  longitude         Float?
  resetToken        String?
  resetTokenExpired DateTime?
  loginAttempts     Int?
  lockAccount       DateTime?
  accountBlock      Boolean @default(false)

  // relacionamentos
  refreshToken refreshToken[] @relation("user-refreshToken")
  solicitationOwner order[] @relation("user-order")
  soccer soccer[] @relation("user-owner-soccer")
  ratingsGiven  rating[] @relation("UserRatingsGiven")
  ratingsReceived rating[] @relation("UserRatingsReceived")

  // criação e updated
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_Users_")
}

// Tabela de RefreshToken
model refreshToken {
  // identificador do refreshToken
  id                String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  userRole          userPermissions
  userId            String @db.ObjectId
  user              user @relation("user-refreshToken", fields: [userId], references: [id], onDelete: Cascade)

  // criação e updated
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_RefreshToken_")
}

model order {
  // identificador da solicitação para cargo de proprietario
  id              String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  localName       String
  description     String
  cnpj            String
  fone            String
  status          orderStatus @default(PENDING)
  userId          String @db.ObjectId
  user            user @relation("user-order", fields: [userId], references: [id], onDelete: Cascade)

  // criação e updated
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_Order_")
}

model soccer {
  // identificador da quadra
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  name String
  description String
  cep String
  address String
  city String
  state String
  cnpj String
  fone String
  operationDays String[]
  openHour String
  closingHour String
  priceHour Float
  maxDuration Int
  isActive Boolean @default(true)
  user user @relation("user-owner-soccer", fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId @unique
  userName String
  
  // opcionais
  latitude     Float?
  longitude    Float?
  observations String?

  // relacionamentos
  ratings rating[]

  // criação e updated
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_Soccer_")
}

// Tabela de rating
model rating {
  // identificador
  id    String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  rating Float
  comments String?
  
  // relacionamento com usuário
  userId String @db.ObjectId
  user user @relation("UserRatingsGiven",fields: [userId], references: [id])

  // relacionamento com o usuário
  soccerId String? @db.ObjectId
  soccer   soccer? @relation(fields: [soccerId], references: [id])

  ratedUserId String? @db.ObjectId
  retedUser   user?   @relation("UserRatingsReceived", fields: [ratedUserId], references: [id])

  // criação
  created_at DateTime @default(now())

  @@unique([userId, soccerId])

  @@map("_Rating_")
}