// TypeOrm (prisma)
generator client {
  provider = "prisma-client-js"
}

// Provider (banco de dados = mongodb) Url (string de conexão com o banco de dados)
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Tipos de permissões no sistema 
enum userPermissions {
  USER 
  ADMIN
  OWNER
}

// Tipos de gêneros
enum userGender {
  MALE
  FEMALE
  NOTINFORM
}

// Tipos de status do suporte
enum supportStatus {
  PEDDING
  RESOLVED
}

// Tabela usuário (e seus atributos)
model user {
  // identificador do usuário
  id       String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos obrigatórios
  name              String
  email             String @unique
  password          String
  age               Int
  role              userPermissions @default(USER)
  address           String
  cep               String
  cpf               String
  gender            userGender
  profileImage      String
  
  // dados opcionais
  resetToken        String?
  resetTokenExpired DateTime?
  loginAttempts     Int?
  lockAccount       DateTime?
  accountBlock      Boolean @default(false)

  // relacionamentos
  refreshToken refreshToken[] @relation("user-refreshToken")
  support support[] @relation("user-support")

  // criação e updated
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_Users_")
}

// Tabela de RefreshToken
model refreshToken {
  // identificador do refreshToken
  id                String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  userRole          userPermissions
  userId            String @db.ObjectId
  user              user @relation("user-refreshToken", fields: [userId], references: [id], onDelete: Cascade)

  // criação e updated
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_RefreshToken_")
}

// Tabela para suporte
model support {
  // identificador da solicitação de suportte
  id                String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  title             String
  description       String
  status            supportStatus @default(PEDDING)

  // relacionamento com a tabela user
  user              user @relation("user-support", fields: [userId], references: [id], onDelete: Cascade)
  userId            String @db.ObjectId

  // criação e updated
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_Support_")
}
